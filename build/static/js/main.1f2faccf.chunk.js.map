{"version":3,"sources":["serviceWorker.js","components/UI/Toolbar/Menus/AnonimousMenu.js","components/UI/Toolbar/Toolbar.js","axios-api.js","constants.js","store/actions/tasksActions.js","components/Task/Task.js","containers/MainPage/MainPage.js","components/UI/Form/FormElement.js","containers/TaskSend/TaskSend.js","store/actions/usersActions.js","containers/Login/Login.js","containers/TaskEdit/TaskEdit.js","store/actions/adminActions.js","App.js","store/reducers/tasksReducer.js","store/reducers/usersReducer.js","store/reducers/adminReducer.js","store/configureStore.js","store/LocalStorage.js","index.js"],"names":["Boolean","window","location","hostname","match","AnonymousMenu","react_default","a","createElement","react","NavItem","NavLink","tag","RouterNavLink","to","exact","Toolbar","_ref","user","Navbar","color","light","expand","NavbarBrand","Nav","className","navbar","AnonimousMenu","instance","axios","create","baseURL","fetchSuccess","data","type","fetchFailure","error","Task","this","props","author","email","text","status","children","Component","MainPage","editPage","id","_this","history","push","fetchTasks","_this2","button","Button","onClick","react_router_dom","style","fontSize","sort_field","tasks","map","task","components_Task_Task","key","username","page","connect","state","users","dispatch","param","getState","get","params","developer","then","response","message","console","log","FormElement","propertyName","title","Object","objectWithoutProperties","FormGroup","row","Label","sm","for","Col","Input","assign","name","invalid","FormFeedback","TaskSend","inputChangeHandler","event","setState","defineProperty","target","value","submitFormHandler","preventDefault","formData","FormData","keys","forEach","append","sendTask","Form","onSubmit","Form_FormElement","onChange","placeholder","offset","size","artistData","post","NotificationManager","success","sendFailure","loginUserFailure","Login","password","loginUser","autoComplete","loginError","userData","global","TaskEdit","token","_callee","regenerator_default","wrap","_context","prev","next","editTask","stop","failure","App","lib","UI_Toolbar_Toolbar","Container","react_router","path","component","withRouter","initialState","tasksReducer","arguments","length","undefined","action","objectSpread","usersReducer","adminReducer","createBrowserHistory","rootReducer","combineReducers","admin","router","connectRouter","middleware","thunkMiddleware","routerMiddleware","enhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","apply","persistedState","serializedState","localStorage","getItem","JSON","parse","e","loadFromLocalStorage","store","createStore","subscribe","stringify","setItem","saveToLocalStorage","app","es","esm","src_App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1f2faccf.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Fragment} from 'react';\nimport {NavItem, NavLink} from \"reactstrap\";\nimport {NavLink as RouterNavLink} from \"react-router-dom\";\n\nconst AnonymousMenu = () => (\n    <Fragment>\n        <NavItem>\n            <NavLink tag={RouterNavLink} to=\"/login\" exact>Вход для админа</NavLink>\n        </NavItem>\n    </Fragment>\n);\n\nexport default AnonymousMenu;","import React from 'react';\nimport {\n    Nav,\n    Navbar,\n    NavbarBrand, NavItem\n} from \"reactstrap\";\nimport {NavLink as RouterNavLink} from \"react-router-dom\";\nimport AnonimousMenu from \"./Menus/AnonimousMenu\";\n\nconst Toolbar = ({user}) => {\n    return (\n        <Navbar color=\"light\" light expand=\"md\">\n            <NavbarBrand tag={RouterNavLink} to=\"/\">Tasks</NavbarBrand>\n            <Nav className=\"ml-auto\" navbar>\n                {user ?  <NavItem>Hello, admin</NavItem> : <AnonimousMenu/>}\n            </Nav>\n        </Navbar>\n    );\n};\n\nexport default Toolbar;","import axios from 'axios/index';\nimport {apiURL} from \"./constants\";\n\nconst instance = axios.create({\n    baseURL: apiURL\n});\n\nexport default instance;","export const apiURL = 'https://uxcandy.com/~shapoval/test-task-backend/v2/';","import axios from \"../../axios-api\";\nimport {push} from \"connected-react-router\";\nimport {NotificationManager} from 'react-notifications';\n\nexport const FETCH_SUCCESS = 'FETCH_SUCCESS';\nexport const FETCH_FAILURE = \"FETCH_FAILURE\";\n\nexport const SEND_SUCCESS = 'SEND_SUCCESS';\nexport const SEND_FAILURE = \"SEND_FAILURE\";\nexport const SAVE_SORT_FIELD = \"SAVE_SORT_FIELD\";\nexport const SAVE_PAGE_NUMBER = \"SAVE_PAGE_NUMBER\";\n\nexport const fetchSuccess = data => {\n    return {type: FETCH_SUCCESS, data};\n};\n\nconst saveSort = data => {\n    return {type: SAVE_SORT_FIELD, data};\n};\n\nconst savePage = data => {\n    return {type: SAVE_PAGE_NUMBER, data};\n};\n\nconst fetchFailure = error => ({type: FETCH_FAILURE, error});\n\nconst sendSuccess = () => ({type: SEND_SUCCESS});\n\nconst sendFailure = error => ({type: SEND_FAILURE, error});\n\nexport const fetchTasks = (param) => {\n    return (dispatch, getState) => {\n       let state = getState();\n        if (param && \"sort_field\" in param) {\n            param = param['sort_field'];\n            return axios.get('', {\n                params: {\n                    developer: \"Aisalkyn\",\n                    sort_field: param,\n                    page: state.tasks.page\n                }\n            }).then(\n                response => {\n                    dispatch(fetchSuccess(response.data.message.tasks));\n                    dispatch(saveSort(param));\n                },\n                error => dispatch(fetchFailure(error))\n            );\n\n        } else if (param && \"page\" in param) {\n            param = param['page'];\n            return axios.get('', {\n                params: {\n                    developer: \"Aisalkyn\",\n                    sort_field: state.tasks.sort_field,\n                    page: param\n                }\n            }).then(\n                response => {\n                    dispatch(fetchSuccess(response.data.message.tasks));\n                    dispatch(savePage(param))\n                },\n                error => dispatch(fetchFailure(error))\n            );\n        } else {\n            return axios.get('', {\n                params: {\n                    developer: \"Aisalkyn\"\n                }\n            }).then(\n                response => {\n                    console.log(response.data.message);\n                    dispatch(fetchSuccess(response.data.message.tasks))},\n                error => dispatch(fetchFailure(error))\n            );\n        }\n\n    };\n};\n\n\nexport const sendTask = artistData => {\n    return dispatch => {\n        return axios.post('create?developer=Aisalkyn', artistData).then(\n            () => {\n                dispatch(sendSuccess());\n                NotificationManager.success('Создано успешно');\n                dispatch(push('/'));\n            },\n            error => {\n                    dispatch(sendFailure(error));\n                    NotificationManager.error('Ошибка')\n            }\n        )\n    }\n};","import React, {Component} from 'react';\nimport './Task.css';\n\nclass Task extends Component {\n\n    render() {\n        return (\n            <div className=\"Task\">\n                <p> <span className=\"Bold\">Автор: </span>{this.props.author}</p>\n                <p> <span className=\"Bold\">Почта: </span>{this.props.email}</p>\n                <p className=\"Text\"> <span className=\"Bold\">Задача: </span>{this.props.text}</p>\n                <p> <span className=\"Bold\">Status: </span>{this.props.status}</p>\n                {this.props.children}\n            </div>\n        );\n    }\n}\n\nexport default Task;","import React, {Component, Fragment} from 'react';\nimport {connect} from \"react-redux\";\nimport {fetchTasks} from \"../../store/actions/tasksActions\";\nimport {Button} from \"reactstrap\";\nimport Task from \"../../components/Task/Task\";\nimport {Link} from \"react-router-dom\";\n\n\nclass MainPage extends Component {\n\n\n    componentDidMount() {\n        this.props.fetchTasks();\n    }\n\n    editPage = id => {\n        this.props.history.push('edit/' + id)\n    };\n    render() {\n\n        let button = () => {\n            //\n        };\n        if (this.props.user) {\n\n            button = (id) => {\n                return <Fragment>\n                    <Button onClick={() => this.editPage(id)}>Редактировать</Button>\n                </Fragment>\n            };\n        } else {\n            button = () => {\n                //\n            };\n        }\n        return (\n            <Fragment>\n                <Link style={{fontSize: 36}} to=\"/new\">Создать задачу</Link>\n                <h3>Сортировать по </h3>\n                <Button className=\"mx-2\" onClick={() => this.props.fetchTasks({sort_field: \"username\"})}>По имени</Button>\n                <Button  className=\"mx-2\" onClick={() => this.props.fetchTasks( {sort_field: \"email\"})}>По почте</Button>\n                <Button  className=\"mx-2\" onClick={() => this.props.fetchTasks({sort_field: \"status\"})}>По статусу</Button>\n\n                    {this.props.tasks.map(task => (\n                        <Task\n                            key={task.id}\n                            author={task.username}\n                            email={task.email}\n                            text={task.text}\n                            status={task.status !== 10 ? \"Не выполнена\" : 'Выполнена'}\n                        >\n                            {button(task.id)}\n                        </Task>\n                    ))}\n                <Button  className=\"mx-2\" onClick={() => this.props.fetchTasks({page: this.props.page === 1 ? 0 : this.props.page - 1})}>Назад</Button>\n                <Button  className=\"mx-2\" onClick={() => this.props.fetchTasks({page: this.props.page + 1})}>Вперед</Button>\n            </Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        tasks: state.tasks.tasks,\n        page: state.tasks.page,\n        user: state.users.user\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchTasks: (param) => dispatch(fetchTasks(param))\n    }\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainPage);","import React from 'react';\nimport PropTypes from \"prop-types\";\n\nimport {Col, FormFeedback, FormGroup, Input, Label} from \"reactstrap\";\n\nconst FormElement = ({propertyName, title, error, children, ...props}) => {\n    return (\n        <FormGroup row>\n            <Label sm={2} for={propertyName}>{title}</Label>\n            <Col sm={10}>\n                <Input\n                    id={propertyName}\n                    name={propertyName}\n                    invalid={!!error}\n                    {...props}\n                >\n                    {children}\n                </Input>\n                {error && (\n                    <FormFeedback>\n                        {error}\n                    </FormFeedback>\n                )}\n            </Col>\n        </FormGroup>\n    );\n};\n\nFormElement.propTypes = {\n    propertyName: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    error: PropTypes.string\n};\n\nexport default FormElement;","import React, {Component, Fragment} from 'react';\nimport {connect} from \"react-redux\";\nimport {Form, FormGroup, Col, Button} from \"reactstrap\";\n\n\nimport FormElement from \"../../components/UI/Form/FormElement\";\nimport {sendTask} from \"../../store/actions/tasksActions\";\n\n\n\nclass TaskSend extends Component {\n    state = {\n        username: '',\n        text: '',\n        email: ''\n    };\n\n    inputChangeHandler = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    };\n\n    submitFormHandler = event => {\n        event.preventDefault();\n        const formData = new FormData();\n        Object.keys(this.state).forEach(key => {\n            formData.append(key, this.state[key]);\n        });\n        this.props.sendTask(formData);\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <Form onSubmit={this.submitFormHandler}>\n                    <h2>Добавить новую задачу</h2>\n                    <FormElement\n                        propertyName=\"username\"\n                        title=\"Имя\"\n                        type=\"text\"\n                        value={this.state.username}\n                        onChange={this.inputChangeHandler}\n                        placeholder=\"Введите имя\"\n                    />\n                    <FormElement\n                        propertyName=\"email\"\n                        title=\"Email\"\n                        type=\"email\"\n                        value={this.state.email}\n                        onChange={this.inputChangeHandler}\n                        placeholder=\"Введите электронную почту\"\n                    />\n                    <FormElement\n                        propertyName=\"text\"\n                        title=\"Задача\"\n                        type=\"textarea\"\n                        value={this.state.text}\n                        onChange={this.inputChangeHandler}\n                        placeholder=\"Введите текст задачи\"\n                    />\n                    <FormGroup row>\n                        <Col sm={{offset: 2, size: 10}} />\n                        <Button className=\"ml-3\" type=\"submit\" color=\"primary\">Создать</Button>\n                    </FormGroup>\n                </Form>\n            </Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    error: state.tasks.error,\n    user: state.users.user\n});\n\nconst mapDispatchToProps = dispatch => ({\n    sendTask: data => dispatch(sendTask(data))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskSend);","import axios from '../../axios-api';\nimport {push} from 'connected-react-router';\nimport {NotificationManager} from \"react-notifications\";\n\n\nexport const LOGIN_USER_SUCCESS = \"LOGIN_USER_SUCCESS\";\nexport const LOGIN_USER_FAILURE = \"LOGIN_USER_FAILURE\";\n\n\nconst loginUserSuccess = user => ({type: LOGIN_USER_SUCCESS, user});\nconst loginUserFailure = error => ({type: LOGIN_USER_FAILURE, error});\n\n\nexport const loginUser = userData => {\n    return dispatch => {\n        return axios.post('/login?developer=Aisalkyn', userData).then(\n            response => {\n                dispatch(loginUserSuccess(response.data));\n                NotificationManager.success('Logged in successfully');\n                dispatch(push('/'));\n            },\n            error => {\n                if(error.response && error.response.data){\n                    dispatch(loginUserFailure(error.response.data.error))\n                } else {\n                    dispatch(loginUserFailure({global: 'No connection'}))\n                }\n\n            }\n        )\n    }\n};\n\n","import React, {Component, Fragment} from 'react';\nimport {Button, Col, Form, FormGroup} from \"reactstrap\";\nimport {connect} from \"react-redux\";\n\nimport {loginUser} from \"../../store/actions/usersActions\";\nimport FormElement from \"../../components/UI/Form/FormElement\";\n\nclass Login extends Component {\n    state = {\n        username: '',\n        password: '',\n    };\n\n    inputChangeHandler = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    };\n\n    submitFormHandler = event => {\n        event.preventDefault();\n        const formData = new FormData();\n        Object.keys(this.state).forEach(key => {\n            formData.append(key, this.state[key]);\n        });\n        this.props.loginUser(formData)\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <h2 className=\"mb-4\">Login</h2>\n                <Form onSubmit={this.submitFormHandler}>\n                    <FormElement\n                        propertyName=\"username\"\n                        title=\"Username\"\n                        type=\"text\"\n                        value={this.state.username}\n                        onChange={this.inputChangeHandler}\n                        placeholder=\"Enter username you registered with\"\n                        autoComplete=\"current-username\"\n                    />\n                    <FormElement\n                        propertyName=\"password\"\n                        title=\"Password\"\n                        type=\"password\"\n                        value={this.state.password}\n                        onChange={this.inputChangeHandler}\n                        placeholder=\"Enter your password\"\n                        autoComplete=\"current-password\"\n                    />\n                    <FormGroup row>\n                        <Col sm={{offset: 2, size: 10}}/>\n                        <Button className=\"ml-3\"  type=\"submit\" color=\"primary\">Login</Button>\n                    </FormGroup>\n                </Form>\n            </Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    error: state.users.loginError\n});\n\nconst mapDispatchToProps = dispatch => ({\n    loginUser: userData => dispatch(loginUser(userData))\n});\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","import React, {Component, Fragment} from 'react';\nimport {connect} from \"react-redux\";\nimport {Form, FormGroup, Col, Button} from \"reactstrap\";\n\n\nimport FormElement from \"../../components/UI/Form/FormElement\";\nimport {editTask} from \"../../store/actions/adminActions\";\n\n\nclass TaskEdit extends Component {\n    state = {\n        status: '',\n        text: '',\n        token: ''\n    };\n\n    inputChangeHandler = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    };\n\n    submitFormHandler = async event => {\n        event.preventDefault();\n        await this.setState({token: this.props.user.message.token});\n\n        const formData = new FormData();\n        Object.keys(this.state).forEach(key => {\n            formData.append(key, this.state[key]);\n        });\n        let id = this.props.match.params.id;\n        this.props.editTask(formData, id);\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <Form onSubmit={this.submitFormHandler}>\n                    <h2>Add new artist</h2>\n                    <FormElement\n                        propertyName=\"text\"\n                        title=\"text\"\n                        type=\"text\"\n                        value={this.state.text}\n                        onChange={this.inputChangeHandler}\n                        placeholder=\"Enter text\"\n                    />\n                    <FormElement\n                        propertyName=\"status\"\n                        title=\"status\"\n                        type=\"number\"\n                        value={this.state.status}\n                        onChange={this.inputChangeHandler}\n                        placeholder=\"Enter status\"\n                    />\n                    <FormGroup row>\n                        <Col sm={{offset: 2, size: 10}}/>\n                        <Button className=\"ml-3\" type=\"submit\" color=\"primary\">Create</Button>\n                    </FormGroup>\n                </Form>\n            </Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    error: state.tasks.error,\n    user: state.users.user\n});\n\nconst mapDispatchToProps = dispatch => ({\n    editTask: (data, id) => dispatch(editTask(data, id))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskEdit);","import axios from \"../../axios-api\";\nimport {NotificationManager} from \"react-notifications\";\nimport {push} from \"connected-react-router\";\n\n\nexport const SUCCESS = 'SUCCESS';\nexport const FAILURE = \"FAILURE\";\n\n\nconst success = () => ({type: SUCCESS});\n\nconst failure = error => ({type: FAILURE, error});\n\nexport const editTask = (data, id) => {\n\n    return dispatch => {\n        return axios.post('/edit/' + id +'?developer=Aisalkyn', data).then(\n            () => {\n                dispatch(success());\n                NotificationManager.success('Отредактировано');\n                dispatch(push('/'));\n            },\n            error => {\n                    dispatch(failure(error));\n                NotificationManager.error('Ошибка');\n            }\n        )\n    }\n};","import React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport {withRouter} from \"react-router\";\nimport {NotificationContainer} from \"react-notifications\";\nimport Container from \"reactstrap/es/Container\";\nimport { Route, Switch} from \"react-router-dom\";\nimport Toolbar from \"./components/UI/Toolbar/Toolbar\";\nimport MainPage from \"./containers/MainPage/MainPage\";\nimport TaskSend from \"./containers/TaskSend/TaskSend\";\nimport Login from \"./containers/Login/Login\";\nimport TaskEdit from \"./containers/TaskEdit/TaskEdit\";\n\n\n\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <NotificationContainer/>\n                <header>\n                    <Toolbar user={this.props.user}/>\n                </header>\n                <Container className=\"mt-5\">\n                    <Switch>\n                        <Route path=\"/\" exact component={MainPage}/>\n                        <Route path=\"/new\" exact component={TaskSend}/>\n                        <Route path=\"/login\" exact component={Login}/>\n                        <Route path=\"/edit/:id\" exact component={TaskEdit}/>\n                    </Switch>\n                </Container>\n            </div>\n        );\n    }\n}\nconst mapStateToProps = state => ({\n    user: state.users.user\n});\n\n\nexport default withRouter(connect(mapStateToProps)(App));\n\n\n\n","import {\n    FETCH_FAILURE,\n    FETCH_SUCCESS, SAVE_PAGE_NUMBER, SAVE_SORT_FIELD,\n    SEND_FAILURE\n} from \"../actions/tasksActions\";\n\nconst initialState = {\n    tasks: [],\n    page: 1,\n    error: null,\n    sort_field: ''\n};\n\nconst tasksReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_SUCCESS:\n            return {\n                ...state,\n                tasks: action.data,\n            };\n        case SAVE_SORT_FIELD:\n            return {\n                ...state,\n                sort_field: action.data,\n\n            };\n        case SAVE_PAGE_NUMBER:\n            return {\n                ...state,\n                page: action.data,\n\n            };\n        case SEND_FAILURE:\n            return {\n                ...state,\n                error: action.error\n            };\n        case FETCH_FAILURE:\n            return {\n                ...state,\n                error: action.error\n            };\n        default:\n            return state;\n    }\n};\nexport default tasksReducer;","import {\n    LOGIN_USER_FAILURE,\n    LOGIN_USER_SUCCESS,\n} from \"../actions/usersActions\";\n\nconst initialState = {\n    user: null,\n    loginError: null,\n};\n\nconst usersReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case LOGIN_USER_SUCCESS:\n            return {\n                ...state,\n                user: action.user,\n                loginError: null,\n            };\n        case LOGIN_USER_FAILURE:\n            return {...state,\n                loginError: action.error};\n        default:\n            return state;\n    }\n};\nexport default usersReducer;","import {FAILURE} from \"../actions/adminActions\";\n\n\nconst initialState = {\n    error: null\n\n};\n\nconst adminReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case FAILURE:\n            return {\n                ...state,\n                error: action.error\n            };\n        default:\n            return state;\n    }\n};\nexport default adminReducer;","import {createBrowserHistory} from \"history\";\nimport {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\nimport tasksReducer from \"./reducers/tasksReducer\";\nimport usersReducer from \"./reducers/usersReducer\";\nimport adminReducer from \"./reducers/adminReducer\";\nimport {connectRouter, routerMiddleware} from \"connected-react-router\";\nimport thunkMiddleware from \"redux-thunk\";\nimport {loadFromLocalStorage, saveToLocalStorage} from \"./LocalStorage\";\n\nexport const history = createBrowserHistory();\n\n\n\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    users: usersReducer,\n    admin: adminReducer,\n    router: connectRouter(history)\n});\n\nconst middleware = [\n    thunkMiddleware,\n    routerMiddleware(history)\n];\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst enhancers = composeEnhancers(applyMiddleware(...middleware));\nconst persistedState = loadFromLocalStorage();\n\nconst store = createStore(rootReducer, persistedState, enhancers);\n\nstore.subscribe(() => {\n    saveToLocalStorage({\n        users: {\n            user: store.getState().users.user\n        }\n\n    })\n});\n\n// axios.interceptors.request.use(config => {\n//     try {\n//         config.headers['Authorization'] = store.getState().users.user.token;\n//     } catch (e) {\n//         //do nothing, user is not logged in\n//     }\n//     return config;\n// });\n\n\nexport default store;","export const saveToLocalStorage = (state) => {\n    try {\n        const serializedState = JSON.stringify(state);\n        localStorage.setItem('state', serializedState);\n    } catch (e) {\n        console.log('Could not save state');\n    }\n};\n\nexport const loadFromLocalStorage = () => {\n    try {\n        const serializedState = localStorage.getItem('state');\n        if (serializedState === null) {\n            return undefined;\n        }\n        return JSON.parse(serializedState);\n    } catch (e) {\n        return undefined;\n    }\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport {ConnectedRouter} from \"connected-react-router\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-notifications/lib/notifications.css';\n\nimport App from './App';\nimport './index.css';\nimport store, {history} from \"./store/configureStore\";\n\n\n\nconst app = (\n    <Provider store={store}>\n        <ConnectedRouter history={history}>\n            <App/>\n        </ConnectedRouter>\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}